{
	"name": "df_orders_raw_to_cleansed",
	"properties": {
		"folder": {
			"name": "01 Project"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_dest_cust_adls",
						"type": "DatasetReference"
					},
					"name": "customer"
				},
				{
					"dataset": {
						"referenceName": "ds_dest_order",
						"type": "DatasetReference"
					},
					"name": "Order"
				},
				{
					"dataset": {
						"referenceName": "ds_dest_orderitem",
						"type": "DatasetReference"
					},
					"name": "orderitem"
				},
				{
					"dataset": {
						"referenceName": "ds_dest_product",
						"type": "DatasetReference"
					},
					"name": "sourceproduct"
				},
				{
					"dataset": {
						"referenceName": "ds_dest_store",
						"type": "DatasetReference"
					},
					"name": "sourceStore"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sink_cleansing_cust",
						"type": "DatasetReference"
					},
					"name": "sinktocleansingcust"
				},
				{
					"dataset": {
						"referenceName": "ds_sink_cleasing_order",
						"type": "DatasetReference"
					},
					"name": "sinktoCleansedOrder"
				},
				{
					"dataset": {
						"referenceName": "ds_sink_cleansing_orderitem",
						"type": "DatasetReference"
					},
					"name": "sinktoOrderItem"
				},
				{
					"dataset": {
						"referenceName": "ds_sink_cleansing_product",
						"type": "DatasetReference"
					},
					"name": "sinktoProduct"
				},
				{
					"dataset": {
						"referenceName": "ds_sink_cleansing_store",
						"type": "DatasetReference"
					},
					"name": "sinktoStore"
				}
			],
			"transformations": [
				{
					"name": "castcolumns"
				},
				{
					"name": "updatedtimestamp"
				},
				{
					"name": "castordercolumns"
				},
				{
					"name": "deriveColumnOrderDate"
				},
				{
					"name": "derivedatetime"
				},
				{
					"name": "cast1"
				},
				{
					"name": "deriveUpdatedDate"
				},
				{
					"name": "cast2"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "cast3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CUSTOMER_ID as short,",
				"          EMAIL_ADDRESS as string,",
				"          FULL_NAME as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine',",
				"     unquotedColumnNames: true) ~> customer",
				"source(output(",
				"          ORDER_ID as string,",
				"          ORDER_DATETIME as string,",
				"          CUSTOMER_ID as string,",
				"          ORDER_STATUS as string,",
				"          STORE_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> Order",
				"source(output(",
				"          ORDER_ID as short,",
				"          LINE_ITEM_ID as short,",
				"          PRODUCT_ID as short,",
				"          UNIT_PRICE as double,",
				"          QUANTITY as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> orderitem",
				"source(output(",
				"          PRODUCT_ID as short,",
				"          PRODUCT_NAME as string,",
				"          UNIT_PRICE as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> sourceproduct",
				"source(output(",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          STORE_ID as short,",
				"          STORE_NAME as string,",
				"          WEB_ADDRESS as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> sourceStore",
				"customer cast(output(",
				"          CUSTOMER_ID as integer,",
				"          EMAIL_ADDRESS as string,",
				"          FULL_NAME as string",
				"     ),",
				"     errors: true) ~> castcolumns",
				"castcolumns derive(updated_timestamp = toTimestamp(currentDate())) ~> updatedtimestamp",
				"Order cast(output(",
				"          ORDER_ID as integer,",
				"          ORDER_DATETIME as string,",
				"          CUSTOMER_ID as integer,",
				"          STORE_ID as integer",
				"     ),",
				"     errors: true) ~> castordercolumns",
				"castordercolumns derive(ORDER_DATETIME = toTimestamp(ORDER_DATETIME, 'dd-MMM-yy'),",
				"          updated_timestamp = toTimestamp(currentDate())) ~> deriveColumnOrderDate",
				"orderitem derive(updated_timestamp = toTimestamp(currentDate())) ~> derivedatetime",
				"derivedatetime cast(output(",
				"          ORDER_ID as integer,",
				"          LINE_ITEM_ID as integer,",
				"          PRODUCT_ID as integer,",
				"          UNIT_PRICE as integer,",
				"          QUANTITY as integer,",
				"          updated_timestamp as date",
				"     ),",
				"     errors: true) ~> cast1",
				"sourceproduct derive(updated_timestamp = toTimestamp(currentDate())) ~> deriveUpdatedDate",
				"deriveUpdatedDate cast(output(",
				"          PRODUCT_ID as integer,",
				"          PRODUCT_NAME as integer,",
				"          UNIT_PRICE as integer,",
				"          updated_timestamp as timestamp",
				"     ),",
				"     errors: true) ~> cast2",
				"sourceStore derive(updated_timestamp = toTimestamp(currentDate())) ~> derivedColumn1",
				"derivedColumn1 cast(output(",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          STORE_ID as integer,",
				"          STORE_NAME as string,",
				"          updated_timestamp as timestamp",
				"     ),",
				"     errors: true) ~> cast3",
				"updatedtimestamp sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinktocleansingcust",
				"deriveColumnOrderDate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinktoCleansedOrder",
				"cast1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinktoOrderItem",
				"cast2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinktoProduct",
				"cast3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          LATITUDE,",
				"          LONGITUDE,",
				"          STORE_ID,",
				"          STORE_NAME,",
				"          updated_timestamp",
				"     )) ~> sinktoStore"
			]
		}
	}
}