{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-dev-dewest"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ds_source_customer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_source_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "01 Landing"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "customers.json",
						"container": "landing"
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_source_order')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_source_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "01 Landing"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "orders.parquet",
						"container": "landing"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_source_orderitem')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_source_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "01 Landing"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "order_items.txt",
						"container": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_source_product')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_source_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "01 Landing"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "products.json",
						"container": "landing"
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_source_store')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_source_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "01 Landing"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "stores.json",
						"container": "landing"
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_source_stores')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_dest_adls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "00 Misc"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "temp/source",
						"fileSystem": "raw"
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_structured_order')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_dest_adls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "04 structured"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Order",
						"fileSystem": "structured"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_structured_product')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_dest_adls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "04 structured"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Product",
						"fileSystem": "structured"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_structured_store')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_dest_adls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "04 structured"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Store",
						"fileSystem": "structured"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipe_copy_customer_to_raw')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy_customer_to_raw",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_source_customer",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_dest_cust_adls",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "copy_orders_to_raw",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "copy_customer_to_raw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_source_orderitem",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_dest_orderitem",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "copy_orders_to_raw_copy1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "copy_store_to_raw",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_source_order",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_dest_order",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "copy_product_to_raw",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "copy_orders_to_raw",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_source_product",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_dest_product",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "copy_store_to_raw",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "copy_product_to_raw",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_source_store",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_dest_store",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "01 Project"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_source_customer')]",
				"[concat(variables('factoryId'), '/datasets/ds_source_orderitem')]",
				"[concat(variables('factoryId'), '/datasets/ds_source_order')]",
				"[concat(variables('factoryId'), '/datasets/ds_source_product')]",
				"[concat(variables('factoryId'), '/datasets/ds_source_store')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipe_copy_store_behaviour')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy_store_behaviour",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "temp/source",
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_source_stores",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_dest_stores",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "00 Misc"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_source_stores')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipe_copy_then_delete')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data to sink blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_source_blob",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_destination_temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete from source",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy data to sink blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_source_blob",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"wildcardFileName": "*.json",
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "00 Misc"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipe_ifStatement')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_source_adls_csv",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists",
								"itemName"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "vFileName",
							"value": {
								"value": "@activity('Get Metadata1').output.itemName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Get Metadata1').output.exists ",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings",
												"copyBehavior": "PreserveHierarchy"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_source_adls_csv",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_dest_adls_csv",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"vFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "00 Misc"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipe_lookup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_source_adls_csv",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "00 Misc"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipe_switch')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_source_adls_csv",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists",
								"itemName"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Switch1",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@string(activity('Get Metadata1').output.exists)",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "True",
									"activities": [
										{
											"name": "Copy data1",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "DelimitedTextSource",
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													},
													"formatSettings": {
														"type": "DelimitedTextReadSettings"
													}
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings",
														"copyBehavior": "PreserveHierarchy"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ".txt"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_source_adls_csv",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_dest_adls_csv",
													"type": "DatasetReference",
													"parameters": {}
												}
											]
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "00 Misc"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_cleansed_to_strctured')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "01 Project"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_sink_cleansing_store",
								"type": "DatasetReference"
							},
							"name": "storeFromCleansed"
						},
						{
							"dataset": {
								"referenceName": "ds_sink_cleansing_product",
								"type": "DatasetReference"
							},
							"name": "ProductFromCleansed"
						},
						{
							"dataset": {
								"referenceName": "ds_sink_cleasing_order",
								"type": "DatasetReference"
							},
							"name": "sourceFromOrder"
						},
						{
							"dataset": {
								"referenceName": "ds_sink_cleansing_orderitem",
								"type": "DatasetReference"
							},
							"name": "sourceFromOrderItem"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_structured_store",
								"type": "DatasetReference"
							},
							"name": "sinkToStructuredStore"
						},
						{
							"dataset": {
								"referenceName": "ds_structured_product",
								"type": "DatasetReference"
							},
							"name": "sinkToStructuredProduct"
						},
						{
							"dataset": {
								"referenceName": "ds_structured_order",
								"type": "DatasetReference"
							},
							"name": "sinktoStructuredOrder"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "joinOrderWithOrderItem"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> storeFromCleansed",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> ProductFromCleansed",
						"source(output(",
						"          ORDER_ID as integer,",
						"          ORDER_DATETIME as timestamp,",
						"          CUSTOMER_ID as integer,",
						"          ORDER_STATUS as string,",
						"          STORE_ID as integer,",
						"          updated_timestamp as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> sourceFromOrder",
						"source(output(",
						"          ORDER_ID as integer,",
						"          LINE_ITEM_ID as integer,",
						"          PRODUCT_ID as integer,",
						"          UNIT_PRICE as integer,",
						"          QUANTITY as integer,",
						"          updated_timestamp as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> sourceFromOrderItem",
						"sourceFromOrderItem derive(Subtotal = multiply(QUANTITY,UNIT_PRICE)) ~> derivedColumn1",
						"sourceFromOrder, derivedColumn1 join(sourceFromOrder@ORDER_ID == sourceFromOrderItem@ORDER_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinOrderWithOrderItem",
						"joinOrderWithOrderItem select(mapColumn(",
						"          ORDER_ID = sourceFromOrder@ORDER_ID,",
						"          ORDER_DATETIME,",
						"          CUSTOMER_ID,",
						"          ORDER_STATUS,",
						"          STORE_ID,",
						"          PRODUCT_ID,",
						"          UNIT_PRICE,",
						"          QUANTITY,",
						"          Subtotal,",
						"          updated_timestamp = sourceFromOrder@updated_timestamp",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"storeFromCleansed sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkToStructuredStore",
						"ProductFromCleansed sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkToStructuredProduct",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinktoStructuredOrder"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_structured_store')]",
				"[concat(variables('factoryId'), '/datasets/ds_structured_product')]",
				"[concat(variables('factoryId'), '/datasets/ds_structured_order')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_derrived')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "00 Misc"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_source_order",
								"type": "DatasetReference"
							},
							"name": "ordersource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_dest_order",
								"type": "DatasetReference"
							},
							"name": "dsorder"
						}
					],
					"transformations": [
						{
							"name": "addtimestamp"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ORDER_ID as string,",
						"          ORDER_DATETIME as string,",
						"          CUSTOMER_ID as string,",
						"          ORDER_STATUS as string,",
						"          STORE_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> ordersource",
						"ordersource derive(Order_Status = lower(ORDER_STATUS),",
						"          Order_Date = toTimestamp(ORDER_DATETIME, 'dd-MMM-yy'),",
						"          each(match(type=='string'), $$ = lower($$))) ~> addtimestamp",
						"addtimestamp sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> dsorder"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_source_order')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_orders_raw_to_cleansed')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "01 Project"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_dest_cust_adls",
								"type": "DatasetReference"
							},
							"name": "customer"
						},
						{
							"dataset": {
								"referenceName": "ds_dest_order",
								"type": "DatasetReference"
							},
							"name": "Order"
						},
						{
							"dataset": {
								"referenceName": "ds_dest_orderitem",
								"type": "DatasetReference"
							},
							"name": "orderitem"
						},
						{
							"dataset": {
								"referenceName": "ds_dest_product",
								"type": "DatasetReference"
							},
							"name": "sourceproduct"
						},
						{
							"dataset": {
								"referenceName": "ds_dest_store",
								"type": "DatasetReference"
							},
							"name": "sourceStore"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sink_cleansing_cust",
								"type": "DatasetReference"
							},
							"name": "sinktocleansingcust"
						},
						{
							"dataset": {
								"referenceName": "ds_sink_cleasing_order",
								"type": "DatasetReference"
							},
							"name": "sinktoCleansedOrder"
						},
						{
							"dataset": {
								"referenceName": "ds_sink_cleansing_orderitem",
								"type": "DatasetReference"
							},
							"name": "sinktoOrderItem"
						},
						{
							"dataset": {
								"referenceName": "ds_sink_cleansing_product",
								"type": "DatasetReference"
							},
							"name": "sinktoProduct"
						},
						{
							"dataset": {
								"referenceName": "ds_sink_cleansing_store",
								"type": "DatasetReference"
							},
							"name": "sinktoStore"
						}
					],
					"transformations": [
						{
							"name": "castcolumns"
						},
						{
							"name": "updatedtimestamp"
						},
						{
							"name": "castordercolumns"
						},
						{
							"name": "deriveColumnOrderDate"
						},
						{
							"name": "derivedatetime"
						},
						{
							"name": "cast1"
						},
						{
							"name": "deriveUpdatedDate"
						},
						{
							"name": "cast2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "cast3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CUSTOMER_ID as short,",
						"          EMAIL_ADDRESS as string,",
						"          FULL_NAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     unquotedColumnNames: true) ~> customer",
						"source(output(",
						"          ORDER_ID as string,",
						"          ORDER_DATETIME as string,",
						"          CUSTOMER_ID as string,",
						"          ORDER_STATUS as string,",
						"          STORE_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Order",
						"source(output(",
						"          ORDER_ID as short,",
						"          LINE_ITEM_ID as short,",
						"          PRODUCT_ID as short,",
						"          UNIT_PRICE as double,",
						"          QUANTITY as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> orderitem",
						"source(output(",
						"          PRODUCT_ID as short,",
						"          PRODUCT_NAME as string,",
						"          UNIT_PRICE as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> sourceproduct",
						"source(output(",
						"          LATITUDE as double,",
						"          LONGITUDE as double,",
						"          STORE_ID as short,",
						"          STORE_NAME as string,",
						"          WEB_ADDRESS as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> sourceStore",
						"customer cast(output(",
						"          CUSTOMER_ID as integer,",
						"          EMAIL_ADDRESS as string,",
						"          FULL_NAME as string",
						"     ),",
						"     errors: true) ~> castcolumns",
						"castcolumns derive(updated_timestamp = toTimestamp(currentDate())) ~> updatedtimestamp",
						"Order cast(output(",
						"          ORDER_ID as integer,",
						"          ORDER_DATETIME as string,",
						"          CUSTOMER_ID as integer,",
						"          STORE_ID as integer",
						"     ),",
						"     errors: true) ~> castordercolumns",
						"castordercolumns derive(ORDER_DATETIME = toTimestamp(ORDER_DATETIME, 'dd-MMM-yy'),",
						"          updated_timestamp = toTimestamp(currentDate())) ~> deriveColumnOrderDate",
						"orderitem derive(updated_timestamp = toTimestamp(currentDate())) ~> derivedatetime",
						"derivedatetime cast(output(",
						"          ORDER_ID as integer,",
						"          LINE_ITEM_ID as integer,",
						"          PRODUCT_ID as integer,",
						"          UNIT_PRICE as integer,",
						"          QUANTITY as integer,",
						"          updated_timestamp as date",
						"     ),",
						"     errors: true) ~> cast1",
						"sourceproduct derive(updated_timestamp = toTimestamp(currentDate())) ~> deriveUpdatedDate",
						"deriveUpdatedDate cast(output(",
						"          PRODUCT_ID as integer,",
						"          PRODUCT_NAME as string,",
						"          UNIT_PRICE as integer,",
						"          updated_timestamp as timestamp",
						"     ),",
						"     errors: true) ~> cast2",
						"sourceStore derive(updated_timestamp = toTimestamp(currentDate())) ~> derivedColumn1",
						"derivedColumn1 cast(output(",
						"          LATITUDE as integer,",
						"          LONGITUDE as integer,",
						"          STORE_ID as integer,",
						"          STORE_NAME as string,",
						"          updated_timestamp as timestamp",
						"     ),",
						"     errors: true) ~> cast3",
						"updatedtimestamp sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinktocleansingcust",
						"deriveColumnOrderDate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinktoCleansedOrder",
						"cast1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinktoOrderItem",
						"cast2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinktoProduct",
						"cast3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          LATITUDE,",
						"          LONGITUDE,",
						"          STORE_ID,",
						"          STORE_NAME,",
						"          updated_timestamp",
						"     )) ~> sinktoStore"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_select')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "00 Misc"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_source_orderitem",
								"type": "DatasetReference"
							},
							"name": "sourceorderitem"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_dest_orderitem",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "cast1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ORDER_ID as short,",
						"          LINE_ITEM_ID as short,",
						"          PRODUCT_ID as short,",
						"          UNIT_PRICE as double,",
						"          QUANTITY as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceorderitem",
						"sourceorderitem cast(output(",
						"          ORDER_ID as string,",
						"          LINE_ITEM_ID as string,",
						"          PRODUCT_ID as string,",
						"          UNIT_PRICE as double,",
						"          QUANTITY as integer",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_source_orderitem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_structured_to_Analytics')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "01 Project"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_structured_product",
								"type": "DatasetReference"
							},
							"name": "SourceProduct"
						},
						{
							"dataset": {
								"referenceName": "ds_structured_order",
								"type": "DatasetReference"
							},
							"name": "sourceOrder"
						},
						{
							"dataset": {
								"referenceName": "ds_structured_store",
								"type": "DatasetReference"
							},
							"name": "sourceStore"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_Analytics_Product",
								"type": "DatasetReference"
							},
							"name": "sinkToAnalysis"
						},
						{
							"dataset": {
								"referenceName": "ds_Analysis_store",
								"type": "DatasetReference"
							},
							"name": "sinktoAnalysisStore"
						}
					],
					"transformations": [
						{
							"name": "joinProductwithOrder"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "selectLimitedColumns"
						},
						{
							"name": "filterOutCancelledOrder"
						},
						{
							"name": "join1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select1"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PRODUCT_ID as integer,",
						"          PRODUCT_NAME as integer,",
						"          UNIT_PRICE as integer,",
						"          updated_timestamp as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceProduct",
						"source(output(",
						"          ORDER_ID as integer,",
						"          ORDER_DATETIME as timestamp,",
						"          CUSTOMER_ID as integer,",
						"          ORDER_STATUS as string,",
						"          STORE_ID as integer,",
						"          PRODUCT_ID as integer,",
						"          UNIT_PRICE as integer,",
						"          QUANTITY as integer,",
						"          Subtotal as integer,",
						"          updated_timestamp as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> sourceOrder",
						"source(output(",
						"          LATITUDE as double,",
						"          LONGITUDE as double,",
						"          STORE_ID as integer,",
						"          STORE_NAME as string,",
						"          updated_timestamp as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> sourceStore",
						"SourceProduct, sourceOrder join(SourceProduct@PRODUCT_ID == sourceOrder@PRODUCT_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinProductwithOrder",
						"joinProductwithOrder derive(Month_Year = concat(toString(month(ORDER_DATETIME)), '-') + toString(year(ORDER_DATETIME))) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          PRODUCT_NAME,",
						"          ORDER_STATUS,",
						"          Subtotal,",
						"          Month_Year",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectLimitedColumns",
						"selectLimitedColumns filter(ORDER_STATUS != 'CANCELLED') ~> filterOutCancelledOrder",
						"sourceStore, sourceOrder join(sourceStore@STORE_ID == sourceOrder@STORE_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 derive(Month_Year = concat(toString(month(ORDER_DATETIME)), '-') + toString(year(ORDER_DATETIME))) ~> derivedColumn2",
						"derivedColumn2 select(mapColumn(",
						"          LATITUDE,",
						"          LONGITUDE,",
						"          STORE_NAME,",
						"          ORDER_STATUS,",
						"          Subtotal,",
						"          Month_Year",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 filter(ORDER_STATUS != 'CANCELLED') ~> filter1",
						"filterOutCancelledOrder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkToAnalysis",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinktoAnalysisStore"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_structured_product')]",
				"[concat(variables('factoryId'), '/datasets/ds_structured_order')]",
				"[concat(variables('factoryId'), '/datasets/ds_structured_store')]"
			]
		}
	]
}