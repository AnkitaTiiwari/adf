{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-dev-dewest"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/df_cleansed_to_strctured')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "01 Project"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_sink_cleansing_store",
								"type": "DatasetReference"
							},
							"name": "storeFromCleansed"
						},
						{
							"dataset": {
								"referenceName": "ds_sink_cleansing_product",
								"type": "DatasetReference"
							},
							"name": "ProductFromCleansed"
						},
						{
							"dataset": {
								"referenceName": "ds_sink_cleasing_order",
								"type": "DatasetReference"
							},
							"name": "sourceFromOrder"
						},
						{
							"dataset": {
								"referenceName": "ds_sink_cleansing_orderitem",
								"type": "DatasetReference"
							},
							"name": "sourceFromOrderItem"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_structured_store",
								"type": "DatasetReference"
							},
							"name": "sinkToStructuredStore"
						},
						{
							"dataset": {
								"referenceName": "ds_structured_product",
								"type": "DatasetReference"
							},
							"name": "sinkToStructuredProduct"
						},
						{
							"dataset": {
								"referenceName": "ds_structured_order",
								"type": "DatasetReference"
							},
							"name": "sinktoStructuredOrder"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "joinOrderWithOrderItem"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn2"
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> storeFromCleansed",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> ProductFromCleansed",
						"source(output(",
						"          ORDER_ID as integer,",
						"          ORDER_DATETIME as timestamp,",
						"          CUSTOMER_ID as integer,",
						"          ORDER_STATUS as string,",
						"          STORE_ID as integer,",
						"          updated_timestamp as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> sourceFromOrder",
						"source(output(",
						"          ORDER_ID as integer,",
						"          LINE_ITEM_ID as integer,",
						"          PRODUCT_ID as integer,",
						"          UNIT_PRICE as integer,",
						"          QUANTITY as integer,",
						"          updated_timestamp as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> sourceFromOrderItem",
						"sourceFromOrderItem derive(Subtotal = multiply(QUANTITY,UNIT_PRICE)) ~> derivedColumn1",
						"sourceFromOrder, derivedColumn1 join(sourceFromOrder@ORDER_ID == sourceFromOrderItem@ORDER_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinOrderWithOrderItem",
						"joinOrderWithOrderItem select(mapColumn(",
						"          ORDER_ID = sourceFromOrder@ORDER_ID,",
						"          ORDER_DATETIME,",
						"          CUSTOMER_ID,",
						"          ORDER_STATUS,",
						"          STORE_ID,",
						"          PRODUCT_ID,",
						"          UNIT_PRICE,",
						"          QUANTITY,",
						"          Subtotal,",
						"          updated_timestamp = sourceFromOrder@updated_timestamp",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(Order_Item_ID = concat(toString(ORDER_ID), toString(PRODUCT_ID))) ~> derivedColumn2",
						"storeFromCleansed sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkToStructuredStore",
						"ProductFromCleansed sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkToStructuredProduct",
						"derivedColumn2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          ORDER_DATETIME",
						"     )) ~> sinktoStructuredOrder"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_derrived')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "00 Misc"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_source_order",
								"type": "DatasetReference"
							},
							"name": "ordersource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_dest_order",
								"type": "DatasetReference"
							},
							"name": "dsorder"
						}
					],
					"transformations": [
						{
							"name": "addtimestamp"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ORDER_ID as string,",
						"          ORDER_DATETIME as string,",
						"          CUSTOMER_ID as string,",
						"          ORDER_STATUS as string,",
						"          STORE_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> ordersource",
						"ordersource derive(Order_Status = lower(ORDER_STATUS),",
						"          Order_Date = toTimestamp(ORDER_DATETIME, 'dd-MMM-yy'),",
						"          each(match(type=='string'), $$ = lower($$))) ~> addtimestamp",
						"addtimestamp sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> dsorder"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_orders_raw_to_cleansed')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "01 Project"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_dest_cust_adls",
								"type": "DatasetReference"
							},
							"name": "customer"
						},
						{
							"dataset": {
								"referenceName": "ds_dest_order",
								"type": "DatasetReference"
							},
							"name": "Order"
						},
						{
							"dataset": {
								"referenceName": "ds_dest_orderitem",
								"type": "DatasetReference"
							},
							"name": "orderitem"
						},
						{
							"dataset": {
								"referenceName": "ds_dest_product",
								"type": "DatasetReference"
							},
							"name": "sourceproduct"
						},
						{
							"dataset": {
								"referenceName": "ds_dest_store",
								"type": "DatasetReference"
							},
							"name": "sourceStore"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sink_cleansing_cust",
								"type": "DatasetReference"
							},
							"name": "sinktocleansingcust"
						},
						{
							"dataset": {
								"referenceName": "ds_sink_cleasing_order",
								"type": "DatasetReference"
							},
							"name": "sinktoCleansedOrder"
						},
						{
							"dataset": {
								"referenceName": "ds_sink_cleansing_orderitem",
								"type": "DatasetReference"
							},
							"name": "sinktoOrderItem"
						},
						{
							"dataset": {
								"referenceName": "ds_sink_cleansing_product",
								"type": "DatasetReference"
							},
							"name": "sinktoProduct"
						},
						{
							"dataset": {
								"referenceName": "ds_sink_cleansing_store",
								"type": "DatasetReference"
							},
							"name": "sinktoStore"
						}
					],
					"transformations": [
						{
							"name": "castcolumns"
						},
						{
							"name": "updatedtimestamp"
						},
						{
							"name": "castordercolumns"
						},
						{
							"name": "deriveColumnOrderDate"
						},
						{
							"name": "derivedatetime"
						},
						{
							"name": "cast1"
						},
						{
							"name": "deriveUpdatedDate"
						},
						{
							"name": "cast2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "cast3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CUSTOMER_ID as short,",
						"          EMAIL_ADDRESS as string,",
						"          FULL_NAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     unquotedColumnNames: true) ~> customer",
						"source(output(",
						"          ORDER_ID as string,",
						"          ORDER_DATETIME as string,",
						"          CUSTOMER_ID as string,",
						"          ORDER_STATUS as string,",
						"          STORE_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Order",
						"source(output(",
						"          ORDER_ID as short,",
						"          LINE_ITEM_ID as short,",
						"          PRODUCT_ID as short,",
						"          UNIT_PRICE as double,",
						"          QUANTITY as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> orderitem",
						"source(output(",
						"          PRODUCT_ID as short,",
						"          PRODUCT_NAME as string,",
						"          UNIT_PRICE as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> sourceproduct",
						"source(output(",
						"          LATITUDE as double,",
						"          LONGITUDE as double,",
						"          STORE_ID as short,",
						"          STORE_NAME as string,",
						"          WEB_ADDRESS as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> sourceStore",
						"customer cast(output(",
						"          CUSTOMER_ID as integer,",
						"          EMAIL_ADDRESS as string,",
						"          FULL_NAME as string",
						"     ),",
						"     errors: true) ~> castcolumns",
						"castcolumns derive(updated_timestamp = toTimestamp(currentDate())) ~> updatedtimestamp",
						"Order cast(output(",
						"          ORDER_ID as integer,",
						"          ORDER_DATETIME as string,",
						"          CUSTOMER_ID as integer,",
						"          STORE_ID as integer",
						"     ),",
						"     errors: true) ~> castordercolumns",
						"castordercolumns derive(ORDER_DATETIME = toTimestamp(ORDER_DATETIME, 'dd-MMM-yy'),",
						"          updated_timestamp = toTimestamp(currentDate())) ~> deriveColumnOrderDate",
						"orderitem derive(updated_timestamp = toTimestamp(currentDate())) ~> derivedatetime",
						"derivedatetime cast(output(",
						"          ORDER_ID as integer,",
						"          LINE_ITEM_ID as integer,",
						"          PRODUCT_ID as integer,",
						"          UNIT_PRICE as integer,",
						"          QUANTITY as integer,",
						"          updated_timestamp as date",
						"     ),",
						"     errors: true) ~> cast1",
						"sourceproduct derive(updated_timestamp = toTimestamp(currentDate())) ~> deriveUpdatedDate",
						"deriveUpdatedDate cast(output(",
						"          PRODUCT_ID as integer,",
						"          PRODUCT_NAME as string,",
						"          UNIT_PRICE as integer,",
						"          updated_timestamp as timestamp",
						"     ),",
						"     errors: true) ~> cast2",
						"sourceStore derive(updated_timestamp = toTimestamp(currentDate())) ~> derivedColumn1",
						"derivedColumn1 cast(output(",
						"          LATITUDE as integer,",
						"          LONGITUDE as integer,",
						"          STORE_ID as integer,",
						"          STORE_NAME as string,",
						"          updated_timestamp as timestamp",
						"     ),",
						"     errors: true) ~> cast3",
						"updatedtimestamp sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinktocleansingcust",
						"deriveColumnOrderDate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinktoCleansedOrder",
						"cast1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinktoOrderItem",
						"cast2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinktoProduct",
						"cast3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          LATITUDE,",
						"          LONGITUDE,",
						"          STORE_ID,",
						"          STORE_NAME,",
						"          updated_timestamp",
						"     )) ~> sinktoStore"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_select')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "00 Misc"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_source_orderitem",
								"type": "DatasetReference"
							},
							"name": "sourceorderitem"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_dest_orderitem",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "cast1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ORDER_ID as short,",
						"          LINE_ITEM_ID as short,",
						"          PRODUCT_ID as short,",
						"          UNIT_PRICE as double,",
						"          QUANTITY as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceorderitem",
						"sourceorderitem cast(output(",
						"          ORDER_ID as string,",
						"          LINE_ITEM_ID as string,",
						"          PRODUCT_ID as string,",
						"          UNIT_PRICE as double,",
						"          QUANTITY as integer",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_structured_to_Analytics')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "01 Project"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_structured_product",
								"type": "DatasetReference"
							},
							"name": "SourceProduct"
						},
						{
							"dataset": {
								"referenceName": "ds_structured_order",
								"type": "DatasetReference"
							},
							"name": "sourceOrder"
						},
						{
							"dataset": {
								"referenceName": "ds_structured_store",
								"type": "DatasetReference"
							},
							"name": "sourceStore"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_Analytics_Product",
								"type": "DatasetReference"
							},
							"name": "sinkToAnalysis"
						},
						{
							"dataset": {
								"referenceName": "ds_Analysis_store",
								"type": "DatasetReference"
							},
							"name": "sinktoAnalysisStore"
						}
					],
					"transformations": [
						{
							"name": "joinProductwithOrder"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "selectLimitedColumns"
						},
						{
							"name": "filterOutCancelledOrder"
						},
						{
							"name": "join1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select1"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PRODUCT_ID as integer,",
						"          PRODUCT_NAME as integer,",
						"          UNIT_PRICE as integer,",
						"          updated_timestamp as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceProduct",
						"source(output(",
						"          ORDER_ID as integer,",
						"          ORDER_DATETIME as timestamp,",
						"          CUSTOMER_ID as integer,",
						"          ORDER_STATUS as string,",
						"          STORE_ID as integer,",
						"          PRODUCT_ID as integer,",
						"          UNIT_PRICE as integer,",
						"          QUANTITY as integer,",
						"          Subtotal as integer,",
						"          updated_timestamp as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> sourceOrder",
						"source(output(",
						"          LATITUDE as double,",
						"          LONGITUDE as double,",
						"          STORE_ID as integer,",
						"          STORE_NAME as string,",
						"          updated_timestamp as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> sourceStore",
						"SourceProduct, sourceOrder join(SourceProduct@PRODUCT_ID == sourceOrder@PRODUCT_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinProductwithOrder",
						"joinProductwithOrder derive(Month_Year = concat(toString(month(ORDER_DATETIME)), '-') + toString(year(ORDER_DATETIME))) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          PRODUCT_NAME,",
						"          ORDER_STATUS,",
						"          Subtotal,",
						"          Month_Year",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectLimitedColumns",
						"selectLimitedColumns filter(ORDER_STATUS != 'CANCELLED') ~> filterOutCancelledOrder",
						"sourceStore, sourceOrder join(sourceStore@STORE_ID == sourceOrder@STORE_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 derive(Month_Year = concat(toString(month(ORDER_DATETIME)), '-') + toString(year(ORDER_DATETIME))) ~> derivedColumn2",
						"derivedColumn2 select(mapColumn(",
						"          LATITUDE,",
						"          LONGITUDE,",
						"          STORE_NAME,",
						"          ORDER_STATUS,",
						"          Subtotal,",
						"          Month_Year",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 filter(ORDER_STATUS != 'CANCELLED') ~> filter1",
						"filterOutCancelledOrder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkToAnalysis",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinktoAnalysisStore"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_test')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "00 Misc"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_source_orderitem",
								"type": "DatasetReference"
							},
							"name": "orderitem"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_dest_stores",
								"type": "DatasetReference"
							},
							"name": "sinkintotemp"
						}
					],
					"transformations": [
						{
							"name": "newcolumn"
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('roundRobin', 2)) ~> orderitem",
						"orderitem derive(newcolumn = currentDate()) ~> newcolumn",
						"newcolumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkintotemp"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipe_copy_Structured_to_Analysis')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_structured_to_Analytics",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceProduct": {},
									"sourceOrder": {},
									"sourceStore": {},
									"sinkToAnalysis": {},
									"sinktoAnalysisStore": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "01 Project"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_structured_to_Analytics')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipe_copy_cleansing_to_structured')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "cleansing_to_structured",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_cleansed_to_strctured",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"storeFromCleansed": {},
									"ProductFromCleansed": {},
									"sourceFromOrder": {},
									"sourceFromOrderItem": {},
									"sinkToStructuredStore": {},
									"sinkToStructuredProduct": {},
									"sinktoStructuredOrder": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "01 Project"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_cleansed_to_strctured')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipe_copy_raw_to_cleansing')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_Customer",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_orders_raw_to_cleansed",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"customer": {},
									"Order": {},
									"orderitem": {},
									"sourceproduct": {},
									"sourceStore": {},
									"sinktocleansingcust": {},
									"sinktoCleansedOrder": {},
									"sinktoOrderItem": {},
									"sinktoProduct": {},
									"sinktoStore": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "01 Project"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_orders_raw_to_cleansed')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipe_test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_test",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_test",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"orderitem": {},
									"sinkintotemp": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "00 Misc"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_test')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/master_pipe')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "from_customer_Raw",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pipe_copy_customer_to_raw",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "from_Raw_cleansing",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "from_customer_Raw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pipe_copy_raw_to_cleansing",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "from_cleasnsing_to_structured",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "from_Raw_cleansing",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pipe_copy_cleansing_to_structured",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "from Structures to Analysis",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "from_cleasnsing_to_structured",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pipe_copy_Structured_to_Analysis",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "01 Project"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pipe_copy_raw_to_cleansing')]",
				"[concat(variables('factoryId'), '/pipelines/pipe_copy_cleansing_to_structured')]",
				"[concat(variables('factoryId'), '/pipelines/pipe_copy_Structured_to_Analysis')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_daily')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "master_pipe",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 15,
						"startTime": "2025-07-27T17:05:00",
						"timeZone": "W. Europe Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/master_pipe')]"
			]
		}
	]
}